from odoo import models, fields, api
from odoo.exceptions import ValidationError, UserError
from datetime import datetime


class StockTransfer(models.Model):
    _name = 'stock.transfer'
    _description = '–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤'
    _order = 'date desc, number desc'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    number = fields.Char(
        string='–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        required=True,
        copy=False,
        readonly=True,
        default='–ù–æ–≤–∏–π'
    )
    
    date = fields.Date(
        string='–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        required=True,
        default=fields.Date.context_today
    )
    
    company_id = fields.Many2one(
        'res.company',
        string='–ö–æ–º–ø–∞–Ω—ñ—è',
        required=True,
        default=lambda self: self.env.company
    )
    
    warehouse_from_id = fields.Many2one(
        'stock.warehouse',
        string='–°–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫'
    )
    
    warehouse_to_id = fields.Many2one(
        'stock.warehouse',
        string='–°–∫–ª–∞–¥ –æ–¥–µ—Ä–∂—É–≤–∞—á'
    )
    
    employee_from_id = fields.Many2one(
        'hr.employee',
        string='–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫'
    )
    
    employee_to_id = fields.Many2one(
        'hr.employee',
        string='–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –æ–¥–µ—Ä–∂—É–≤–∞—á'
    )
    
    transfer_type = fields.Selection([
        ('warehouse', '–ú—ñ–∂ —Å–∫–ª–∞–¥–∞–º–∏'),
        ('employee', '–ú—ñ–∂ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º–∏'),
        ('warehouse_employee', '–ó—ñ —Å–∫–ª–∞–¥—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—É'),
        ('employee_warehouse', '–í—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥')
    ], string='–¢–∏–ø –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è', required=True, default='warehouse')
    
    state = fields.Selection([
        ('draft', '–ß–µ—Ä–Ω–µ—Ç–∫–∞'),
        ('confirmed', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ'),
        ('done', '–í–∏–∫–æ–Ω–∞–Ω–æ'),
        ('cancelled', '–°–∫–∞—Å–æ–≤–∞–Ω–æ')
    ], string='–°—Ç–∞—Ç—É—Å', default='draft', tracking=True)
    
    line_ids = fields.One2many(
        'stock.transfer.line',
        'transfer_id',
        string='–ü–æ–∑–∏—Ü—ñ—ó –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è'
    )
    
    notes = fields.Text(string='–ü—Ä–∏–º—ñ—Ç–∫–∏')
    
    posting_datetime = fields.Datetime(
        string='–ß–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è',
        readonly=True
    )
    
    no_vat = fields.Boolean(
        string='–ë–µ–∑ –ü–î–í',
        default=False
    )

    # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –∑–∞–ª–∏—à–∫—É
    available_stock_ids = fields.One2many(
        'stock.transfer.available.stock',
        'transfer_id',
        string='–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ª–∏—à–∫–∏',
        compute='_compute_available_stock'
    )

    # –ü–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_lines = fields.Integer(
        string='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π',
        compute='_compute_totals',
        store=True
    )

    total_qty = fields.Float(
        string='–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å',
        compute='_compute_totals',
        store=True
    )

    total_amount_no_vat = fields.Float(
        string='–°—É–º–∞ –±–µ–∑ –ü–î–í',
        compute='_compute_totals',
        store=True,
        digits='Product Price'
    )
        
    # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –∑–∞–ª–∏—à–∫—É
    available_stock_ids = fields.One2many(
        'stock.transfer.available.stock',
        'transfer_id',
        string='–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ª–∏—à–∫–∏',
        compute='_compute_available_stock'
    )

    @api.model
    def create(self, vals):
        if vals.get('number', '–ù–æ–≤–∏–π') == '–ù–æ–≤–∏–π':
            vals['number'] = self.env['ir.sequence'].next_by_code('stock.transfer') or '–ù–æ–≤–∏–π'
        return super(StockTransfer, self).create(vals)

    @api.depends('warehouse_from_id', 'employee_from_id', 'transfer_type', 'company_id')
    def _compute_available_stock(self):
        """–û–±—á–∏—Å–ª—é—î –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ª–∏—à–∫–∏ –≤ –¥–∂–µ—Ä–µ–ª—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"""
        for record in self:
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏
            record.available_stock_ids = [(5, 0, 0)]
            
            if record.transfer_type in ['warehouse', 'warehouse_employee'] and record.warehouse_from_id:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–∏—à–∫–∏ –∑—ñ —Å–∫–ª–∞–¥—É
                stock_data = record._get_warehouse_stock(record.warehouse_from_id, record.company_id)
            elif record.transfer_type in ['employee', 'employee_warehouse'] and record.employee_from_id:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ª–∏—à–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
                stock_data = record._get_employee_stock(record.employee_from_id, record.company_id)
            else:
                stock_data = []
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤
            available_stock_lines = []
            for stock in stock_data:
                available_stock_lines.append((0, 0, {
                    'nomenclature_id': stock['nomenclature_id'],
                    'lot_batch': stock['lot_batch'],
                    'available_qty': stock['available_qty'],
                    'location_id': stock['location_id'],
                }))
            
            record.available_stock_ids = available_stock_lines

    @api.depends('line_ids.qty', 'line_ids.amount_no_vat')
    def _compute_totals(self):
        """–û–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—ñ —Å—É–º–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        for record in self:
            record.total_lines = len(record.line_ids)
            record.total_qty = sum(record.line_ids.mapped('qty'))
            record.total_amount_no_vat = sum(record.line_ids.mapped('amount_no_vat'))


    def _add_all_available_items(self, replace_existing=False):
        """–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤"""
        lines_to_create = []
        updated_lines = 0
        
        if replace_existing:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø–æ–∑–∏—Ü—ñ—ó
            self.line_ids = [(5, 0, 0)]
        
        for stock in self.available_stock_ids:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∞ –ø–æ–∑–∏—Ü—ñ—è
            existing_line = self.line_ids.filtered(
                lambda l: l.nomenclature_id.id == stock.nomenclature_id.id and 
                        l.lot_batch == stock.lot_batch
            )
            
            if existing_line:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É –ø–æ–∑–∏—Ü—ñ—é
                existing_line[0].write({
                    'qty': stock.available_qty,
                    'price_unit_no_vat': stock.nomenclature_id.price_usd if hasattr(stock.nomenclature_id, 'price_usd') else 0.0,
                })
                updated_lines += 1
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
                line_vals = {
                    'nomenclature_id': stock.nomenclature_id.id,
                    'lot_batch': stock.lot_batch,
                    'qty': stock.available_qty,
                    'selected_uom_id': stock.nomenclature_id.base_uom_id.id if stock.nomenclature_id.base_uom_id else False,
                    'price_unit_no_vat': stock.nomenclature_id.price_usd if hasattr(stock.nomenclature_id, 'price_usd') else 0.0,
                }
                lines_to_create.append((0, 0, line_vals))
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
        if lines_to_create:
            self.write({'line_ids': lines_to_create})
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message = f"‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!\n"
        if lines_to_create:
            message += f"‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {len(lines_to_create)}\n"
        if updated_lines:
            message += f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: {updated_lines}\n"
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': '–¢–æ–≤–∞—Ä–∏ –¥–æ–¥–∞–Ω—ñ!',
                'message': message,
                'type': 'success',
            }
        }
        

    @api.onchange('warehouse_from_id', 'employee_from_id')
    def _onchange_source_clear_lines(self):
        """–û—á–∏—â–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞"""
        if self.line_ids:
            self.line_ids = [(5, 0, 0)]
            return {
                'warning': {
                    'title': '–£–≤–∞–≥–∞!',
                    'message': '–ü—Ä–∏ –∑–º—ñ–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –≤—Å—ñ –¥–æ–¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –±—É–ª–∏ –æ—á–∏—â–µ–Ω—ñ.'
                }
            }


    def _get_warehouse_stock(self, warehouse, company):
        """–û—Ç—Ä–∏–º—É—î –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ"""
        stock_data = []
        
        if not warehouse:
            return stock_data
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª–æ–∫–∞—Ü—ñ—ó —Å–∫–ª–∞–¥—É
        warehouse_locations = self.env['stock.location'].search([
            ('location_id', 'child_of', warehouse.lot_stock_id.id),
            ('usage', '=', 'internal')
        ])
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–≤–∞–Ω—Ç–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —Ü–∏—Ö –ª–æ–∫–∞—Ü—ñ—è—Ö
        quants = self.env['stock.quant'].search([
            ('location_id', 'in', warehouse_locations.ids),
            ('quantity', '>', 0),
            ('company_id', '=', company.id)
        ])
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö —Ç–∞ –ø–∞—Ä—Ç—ñ—è—Ö
        stock_dict = {}
        for quant in quants:
            # –®—É–∫–∞—î–º–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –ø–æ –Ω–∞–∑–≤—ñ –∞–±–æ –∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç—É
            nomenclature = self.env['product.nomenclature'].search([
                '|',
                ('name', '=', quant.product_id.name),
                ('code', '=', quant.product_id.default_code)
            ], limit=1)
                
            if not nomenclature:
                continue
                
            lot_batch = quant.lot_id.name if quant.lot_id else '–ë–µ–∑ –ø–∞—Ä—Ç—ñ—ó'
            key = (nomenclature.id, lot_batch, quant.location_id.id)
            
            if key in stock_dict:
                stock_dict[key]['available_qty'] += quant.quantity
            else:
                stock_dict[key] = {
                    'nomenclature_id': nomenclature.id,
                    'lot_batch': lot_batch,
                    'available_qty': quant.quantity,
                    'location_id': quant.location_id.id,
                }
        
        return list(stock_dict.values())

    def _get_employee_stock(self, employee, company):
        """–û—Ç—Ä–∏–º—É—î –∑–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"""
        stock_data = []
        
        if not employee:
            return stock_data
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ª–æ–∫–∞—Ü—ñ—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
        employee_location = self._get_employee_location(employee, company)
        
        if employee_location:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–≤–∞–Ω—Ç–∏ –∑ –ª–æ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
            quants = self.env['stock.quant'].search([
                ('location_id', '=', employee_location.id),
                ('quantity', '>', 0),
                ('company_id', '=', company.id)
            ])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            stock_dict = {}
            for quant in quants:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É
                nomenclature = self.env['product.nomenclature'].search([
                    '|',
                    ('name', '=', quant.product_id.name),
                    ('code', '=', quant.product_id.default_code)
                ], limit=1)
                    
                if not nomenclature:
                    continue
                    
                lot_batch = quant.lot_id.name if quant.lot_id else '–ë–µ–∑ –ø–∞—Ä—Ç—ñ—ó'
                key = (nomenclature.id, lot_batch)
                
                if key in stock_dict:
                    stock_dict[key]['available_qty'] += quant.quantity
                else:
                    stock_dict[key] = {
                        'nomenclature_id': nomenclature.id,
                        'lot_batch': lot_batch,
                        'available_qty': quant.quantity,
                        'location_id': employee_location.id,
                    }
            
            stock_data = list(stock_dict.values())
        
        return stock_data
    

    def _get_employee_location(self, employee, company):
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –ª–æ–∫–∞—Ü—ñ—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞"""
        employee_location = self.env['stock.location'].search([
            ('name', '=', f'Employee: {employee.name}'),
            ('usage', '=', 'internal'),
            ('company_id', '=', company.id)
        ], limit=1)
        
        if not employee_location:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞—Ü—ñ—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
            parent_location = self.env['stock.location'].search([
                ('name', '=', 'Employees'),
                ('usage', '=', 'view'),
                ('company_id', '=', company.id)
            ], limit=1)
            
            if not parent_location:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
                parent_location = self.env['stock.location'].create({
                    'name': 'Employees',
                    'usage': 'view',
                    'location_id': self.env.ref('stock.stock_location_locations').id,
                    'company_id': company.id,
                })
            
            employee_location = self.env['stock.location'].create({
                'name': f'Employee: {employee.name}',
                'usage': 'internal',
                'location_id': parent_location.id,
                'company_id': company.id,
            })
        
        return employee_location

    def action_confirm(self):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–∏—à–∫–∏ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        for line in self.line_ids:
            line._validate_stock_availability()
        self.state = 'confirmed'
        
    def action_done(self):
        # –û—Å—Ç–∞–Ω–Ω—ñ–º —Ä–∞–∑–æ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–∏—à–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è–º
        for line in self.line_ids:
            line._validate_stock_availability()
        self.state = 'done'
        self.posting_datetime = datetime.now()
        
    def action_cancel(self):
        self.state = 'cancelled'
        
    def action_draft(self):
        self.state = 'draft'
        self.posting_datetime = False

    @api.onchange('transfer_type', 'warehouse_from_id', 'employee_from_id', 'company_id')
    def _onchange_source_params(self):
        """–ü—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –æ—á–∏—â–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó"""
        if self.line_ids:
            # –ü–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
            return {
                'warning': {
                    'title': '–£–≤–∞–≥–∞!',
                    'message': '–ó–º—ñ–Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –æ—á–∏—â–µ–Ω–Ω—è –≤–∂–µ –¥–æ–¥–∞–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?'
                }
            }

    @api.onchange('transfer_type')
    def _onchange_transfer_type(self):
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        if self.transfer_type == 'warehouse':
            self.employee_from_id = False
            self.employee_to_id = False
        elif self.transfer_type == 'employee':
            self.warehouse_from_id = False
            self.warehouse_to_id = False
        elif self.transfer_type == 'warehouse_employee':
            self.employee_from_id = False
            self.warehouse_to_id = False
        elif self.transfer_type == 'employee_warehouse':
            self.warehouse_from_id = False
            self.employee_to_id = False
        
        # –û—á–∏—â–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∏–ø—É
        self.line_ids = [(5, 0, 0)]


class StockTransferLine(models.Model):
    _name = 'stock.transfer.line'
    _description = '–ü–æ–∑–∏—Ü—ñ—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è'

    transfer_id = fields.Many2one(
        'stock.transfer',
        string='–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è',
        required=True,
        ondelete='cascade'
    )

    available_nomenclature_ids = fields.Many2many(
    'product.nomenclature',
    compute='_compute_available_nomenclature',
    string='–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏'
    )

    max_available_qty = fields.Float(
        string='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ',
        compute='_compute_max_available_qty',
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó'
    )
    
    nomenclature_id = fields.Many2one(
        'product.nomenclature',
        string='–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
        required=True,
        domain="[('id', 'in', available_nomenclature_ids)]"
    )
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    available_nomenclature_ids = fields.Many2many(
        'product.nomenclature',
        compute='_compute_available_nomenclature',
        string='–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏'
    )
    
    lot_batch = fields.Char(
        string='–ü–∞—Ä—Ç—ñ—è/–õ–æ—Ç',
        help='–ü–∞—Ä—Ç—ñ—è –∞–±–æ –ª–æ—Ç —Ç–æ–≤–∞—Ä—É'
    )
    
    available_batches = fields.Char(
        string='–î–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó',
        compute='_compute_available_batches',
        help='–ü–æ–∫–∞–∑—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É'
    )
    
    selected_uom_id = fields.Many2one(
        'uom.uom',
        string='–û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É',
        required=True
    )
    
    qty = fields.Float(
        string='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
        required=True,
        default=1.0
    )
    
    max_available_qty = fields.Float(
        string='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ',
        compute='_compute_max_available_qty',
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó'
    )
    
    price_unit_no_vat = fields.Float(
        string='–¶—ñ–Ω–∞ –±–µ–∑ –ü–î–í',
        default=0.0
    )
    
    vat_rate = fields.Float(
        string='–°—Ç–∞–≤–∫–∞ –ü–î–í',
        default=20.0
    )
    
    amount_no_vat = fields.Float(
        string='–°—É–º–∞ –±–µ–∑ –ü–î–í',
        compute='_compute_amounts',
        store=True
    )
    
    vat_amount = fields.Float(
        string='–°—É–º–∞ –ü–î–í',
        compute='_compute_amounts',
        store=True
    )
    
    amount_with_vat = fields.Float(
        string='–°—É–º–∞ –∑ –ü–î–í',
        compute='_compute_amounts',
        store=True
    )

    @api.depends('transfer_id.available_stock_ids')
    def _compute_available_nomenclature(self):
        """–û–±—á–∏—Å–ª—é—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –∑–∞–ª–∏—à–∫—É"""
        for line in self:
            if line.transfer_id.available_stock_ids:
                # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑ –∑–∞–ª–∏—à–∫—ñ–≤
                available_ids = line.transfer_id.available_stock_ids.mapped('nomenclature_id').ids
                unique_ids = list(set(available_ids))
                line.available_nomenclature_ids = [(6, 0, unique_ids)]
            else:
                line.available_nomenclature_ids = [(6, 0, [])]

    @api.depends('nomenclature_id', 'transfer_id.available_stock_ids')
    def _compute_available_batches(self):
        """–ü–æ–∫–∞–∑—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É"""
        for line in self:
            if line.nomenclature_id and line.transfer_id.available_stock_ids:
                batches = line.transfer_id.available_stock_ids.filtered(
                    lambda x: x.nomenclature_id.id == line.nomenclature_id.id
                ).mapped('lot_batch')
                line.available_batches = ', '.join(batches) if batches else '–ü–∞—Ä—Ç—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ'
            else:
                line.available_batches = ''

    @api.depends('nomenclature_id', 'lot_batch', 'transfer_id.available_stock_ids')
    def _compute_max_available_qty(self):
        """–û–±—á–∏—Å–ª—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó"""
        for line in self:
            if line.nomenclature_id and line.transfer_id.available_stock_ids:
                stock_record = line.transfer_id.available_stock_ids.filtered(
                    lambda x: x.nomenclature_id.id == line.nomenclature_id.id and 
                            x.lot_batch == line.lot_batch
                )
                line.max_available_qty = stock_record.available_qty if stock_record else 0
            else:
                line.max_available_qty = 0

    @api.depends('qty', 'price_unit_no_vat', 'vat_rate')
    def _compute_amounts(self):
        for line in self:
            line.amount_no_vat = line.qty * line.price_unit_no_vat
            line.vat_amount = line.amount_no_vat * line.vat_rate / 100
            line.amount_with_vat = line.amount_no_vat + line.vat_amount

    @api.onchange('nomenclature_id')
    def _onchange_nomenclature_id(self):
        """–ü—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ –ø–æ–ª—è"""
        if self.nomenclature_id:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—É –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É
            if hasattr(self.nomenclature_id, 'base_uom_id') and self.nomenclature_id.base_uom_id:
                self.selected_uom_id = self.nomenclature_id.base_uom_id
            
            # –û—á–∏—â–∞—î–º–æ –ø–∞—Ä—Ç—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–æ–≤–∞—Ä—É
            self.lot_batch = False
            self.qty = 1.0
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É —è–∫—â–æ —î –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ñ
            if hasattr(self.nomenclature_id, 'price_usd') and self.nomenclature_id.price_usd:
                self.price_unit_no_vat = self.nomenclature_id.price_usd
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –ø–∞—Ä—Ç—ñ—é —è–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞
            available_stocks = self.transfer_id.available_stock_ids.filtered(
                lambda x: x.nomenclature_id.id == self.nomenclature_id.id
            )
            
            if len(available_stocks) == 1:
                self.lot_batch = available_stocks[0].lot_batch
                if available_stocks[0].available_qty > 0:
                    self.qty = available_stocks[0].available_qty

    @api.onchange('lot_batch')
    def _onchange_lot_batch(self):
        """–ü—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –æ–Ω–æ–≤–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å"""
        if self.lot_batch and self.max_available_qty > 0:
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∑—è—Ç–∏ –≤—Å—é –ø–∞—Ä—Ç—ñ—é
            if self.max_available_qty != self.qty:
                return {
                    'warning': {
                        'title': '–î–æ—Å—Ç—É–ø–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å',
                        'message': f'–î–æ—Å—Ç—É–ø–Ω–æ {self.max_available_qty} –æ–¥. –ë–∞–∂–∞—î—Ç–µ –≤–∑—è—Ç–∏ –≤—Å—é –ø–∞—Ä—Ç—ñ—é?'
                    }
                }

    def action_take_full_batch(self):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∑—è—Ç—Ç—è –ø–æ–≤–Ω–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑ –ø–∞—Ä—Ç—ñ—ó"""
        self.ensure_one()
        
        if not self.nomenclature_id or not self.lot_batch:
            raise UserError('–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —Ç–∞ –ø–∞—Ä—Ç—ñ—é!')
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –ø–∞—Ä—Ç—ñ—ó
        matching_stock = self.transfer_id.available_stock_ids.filtered(
            lambda x: x.nomenclature_id.id == self.nomenclature_id.id and 
                    x.lot_batch == self.lot_batch
        )
        
        if matching_stock and matching_stock[0].available_qty > 0:
            self.qty = matching_stock[0].available_qty



    def _validate_stock_availability(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –Ω–∞ –∑–∞–ª–∏—à–∫—É"""
        self.ensure_one()
        if self.qty > self.max_available_qty:
            raise ValidationError(
                f'–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É "{self.nomenclature_id.name}" '
                f'–ø–∞—Ä—Ç—ñ—ó "{self.lot_batch}" –Ω–∞ –∑–∞–ª–∏—à–∫—É!\n'
                f'–ü–æ—Ç—Ä—ñ–±–Ω–æ: {self.qty}\n'
                f'–î–æ—Å—Ç—É–ø–Ω–æ: {self.max_available_qty}'
            )

    @api.constrains('qty')
    def _check_qty_constraints(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ"""
        for line in self:
            if line.qty <= 0:
                raise ValidationError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å!')
            
            if line.transfer_id.state in ['confirmed', 'done'] and line.qty > line.max_available_qty:
                raise ValidationError(
                    f'–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É "{line.nomenclature_id.name}" –Ω–∞ –∑–∞–ª–∏—à–∫—É!'
                )


class StockTransferAvailableStock(models.TransientModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤"""
    _name = 'stock.transfer.available.stock'
    _description = '–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–ª–∏—à–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è'

    transfer_id = fields.Many2one(
        'stock.transfer',
        string='–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è',
        required=True,
        ondelete='cascade'
    )
    
    nomenclature_id = fields.Many2one(
        'product.nomenclature',
        string='–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
        required=True
    )
    
    lot_batch = fields.Char(
        string='–ü–∞—Ä—Ç—ñ—è/–õ–æ—Ç'
    )
    
    available_qty = fields.Float(
        string='–î–æ—Å—Ç—É–ø–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å'
    )
    
    location_id = fields.Many2one(
        'stock.location',
        string='–õ–æ–∫–∞—Ü—ñ—è'
    )