from odoo import models, fields, api, _
import logging

_logger = logging.getLogger(__name__)


class StockReceiptIncoming(models.Model):
    _inherit = 'stock.receipt.incoming'

    def action_done(self):
        """–†–æ–∑—à–∏—Ä—é—î–º–æ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—ñ–≤ –∑–∞–ª–∏—à–∫—ñ–≤"""
        _logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—Ö—ñ–¥–Ω–æ—ó –Ω–∞–∫–ª–∞–¥–Ω–æ—ó {self.number}")
        
        # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
        result = super().action_done()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—É—Ö–∏ –∑–∞–ª–∏—à–∫—ñ–≤ –ü–Ü–°–õ–Ø –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
        self._create_balance_movements()
        
        return result

    def _create_balance_movements(self):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö–∏ –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–∞–∫–ª–∞–¥–Ω–æ—ó"""
        if 'stock.balance.movement' not in self.env:
            _logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å stock.balance.movement –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        _logger.info(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—ñ–≤ –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ—ó {self.number}")
        
        for line in self.line_ids:
            if line.qty > 0:
                self._create_balance_movement_for_line(line)

    def _create_balance_movement_for_line(self, line):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó"""
        Movement = self.env['stock.balance.movement']
        
        # –ó–±–∏—Ä–∞—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ —è–∫—â–æ —î
        serial_numbers = line.serial_numbers if line.tracking_serial else None
        
        movement_vals = {
            'nomenclature_id': line.nomenclature_id.id,
            'movement_type': 'in',
            'operation_type': 'receipt',
            'qty': line.qty,
            'uom_id': line.selected_uom_id.id if line.selected_uom_id else line.nomenclature_id.base_uom_id.id,
            'date': self.posting_datetime or fields.Datetime.now(),
            'document_reference': f'–ü—Ä–∏—Ö—ñ–¥–Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞ {self.number}',
            'serial_numbers': serial_numbers,
            'company_id': self.company_id.id,
            'location_to_type': 'warehouse',
            'warehouse_to_id': self.warehouse_id.id,
            'location_to_id': self.warehouse_id.lot_stock_id.id,
        }
        
        try:
            movement = Movement.create_movement(**movement_vals)
            _logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}" + 
                        (f" –∑ S/N: {serial_numbers}" if serial_numbers else ""))
            
            # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç
            self.message_post(
                body=f'‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}' + 
                     (f' –∑ —Å–µ—Ä—ñ–π–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏' if serial_numbers else ''),
                message_type='notification'
            )
            
        except Exception as e:
            _logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—É –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}: {e}")
            self.message_post(
                body=f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—É –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}: {e}',
                message_type='notification'
            )


class StockReceiptDisposal(models.Model):
    _inherit = 'stock.receipt.disposal'

    def action_done(self):
        """–†–æ–∑—à–∏—Ä—é—î–º–æ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—ñ–≤ –∑–∞–ª–∏—à–∫—ñ–≤"""
        _logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–∫—Ç–∞ –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è {self.number}")
        
        # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
        result = super().action_done()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—É—Ö–∏ –∑–∞–ª–∏—à–∫—ñ–≤ –ü–Ü–°–õ–Ø –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
        self._create_balance_movements()
        
        return result

    def _create_balance_movements(self):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö–∏ –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π –∞–∫—Ç–∞"""
        if 'stock.balance.movement' not in self.env:
            _logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å stock.balance.movement –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        _logger.info(f"üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—ñ–≤ –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –∞–∫—Ç–∞ {self.number}")
        
        for line in self.line_ids:
            if line.qty > 0:
                self._create_balance_movement_for_line(line)

    def _create_balance_movement_for_line(self, line):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó"""
        Movement = self.env['stock.balance.movement']
        
        # –ó–±–∏—Ä–∞—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ —è–∫—â–æ —î
        serial_numbers = line.serial_numbers if line.tracking_serial else None
        
        movement_vals = {
            'nomenclature_id': line.nomenclature_id.id,
            'movement_type': 'in',
            'operation_type': 'disposal',
            'qty': line.qty,
            'uom_id': line.selected_uom_id.id if line.selected_uom_id else line.nomenclature_id.base_uom_id.id,
            'date': self.posting_datetime or fields.Datetime.now(),
            'document_reference': f'–ê–∫—Ç –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è {self.number}',
            'serial_numbers': serial_numbers,
            'company_id': self.company_id.id,
            'location_to_type': 'warehouse',
            'warehouse_to_id': self.warehouse_id.id,
            'location_to_id': self.warehouse_id.lot_stock_id.id,
        }
        
        try:
            movement = Movement.create_movement(**movement_vals)
            _logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}" + 
                        (f" –∑ S/N: {serial_numbers}" if serial_numbers else ""))
            
            self.message_post(
                body=f'‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}' + 
                     (f' –∑ —Å–µ—Ä—ñ–π–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏' if serial_numbers else ''),
                message_type='notification'
            )
            
        except Exception as e:
            _logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—É –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}: {e}")
            self.message_post(
                body=f'‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—É –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è {line.nomenclature_id.name}: {e}',
                message_type='notification'
            )