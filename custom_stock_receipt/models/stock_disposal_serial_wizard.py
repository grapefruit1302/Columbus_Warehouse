from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
import logging

_logger = logging.getLogger(__name__)

class StockDisposalSerialWizard(models.TransientModel):
    _name = 'stock.disposal.serial.wizard'
    _description = 'Wizard –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –≤ –∞–∫—Ç –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è'

    warning_message = fields.Text('–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è', readonly=True)
    disposal_id = fields.Many2one('stock.receipt.disposal', '–ê–∫—Ç –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è', required=True)
    selected_line_id = fields.Many2one('stock.receipt.disposal.line', '–û–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è', required=True)
    selected_product_name = fields.Char('–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É', related='selected_line_id.nomenclature_id.name', readonly=True)
    selected_qty = fields.Float('–ö—ñ–ª—å–∫—ñ—Å—Ç—å', related='selected_line_id.qty', readonly=True)
    current_serial_count = fields.Integer('–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å S/N', compute='_compute_current_serial_count')
    serial_line_ids = fields.One2many('stock.disposal.serial.wizard.serial', 'wizard_id', '–°–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏')  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û –Ω–∞–∑–≤—É

    @api.depends('serial_line_ids')
    def _compute_current_serial_count(self):
        for wizard in self:
            wizard.current_serial_count = len([line for line in wizard.serial_line_ids if line.serial_number])

    @api.model
    def default_get(self, fields_list):
        res = super().default_get(fields_list)
        line_id = self.env.context.get('default_selected_line_id')
        
        if line_id:
            line = self.env['stock.receipt.disposal.line'].browse(line_id)
            res['disposal_id'] = line.disposal_id.id
            res['selected_line_id'] = line_id
            
            if line.serial_numbers:
                existing_serials = []
                for line_text in line.serial_numbers.split('\n'):
                    for serial in line_text.split(','):
                        serial = serial.strip()
                        if serial:
                            existing_serials.append(serial)
                
                res['serial_line_ids'] = [(0, 0, {'serial_number': serial}) for serial in existing_serials]
        
        return res

    def action_save_and_close(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–∞–ª–∏—à–∫–∏"""
        self.ensure_one()
        validation_result = self._validate_serial_numbers()
        
        if isinstance(validation_result, dict) and validation_result.get('type') == 'ir.actions.act_window':
            return validation_result
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ —Ä—è–¥–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        serials = [line.serial_number for line in self.serial_line_ids if line.serial_number]
        serial_numbers_text = '\n'.join(serials)
        
        _logger.info(f"üîß Saving serial numbers to disposal line: '{serial_numbers_text}'")
        self.selected_line_id.serial_numbers = serial_numbers_text
        
        # ‚úÖ –î–û–î–ê–Ñ–ú–û: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –≤ –∑–∞–ª–∏—à–∫–∞—Ö
        self._update_balance_serial_numbers(serial_numbers_text)
        
        return {'type': 'ir.actions.act_window_close'}

    def _update_balance_serial_numbers(self, serial_numbers_text):
        """–û–Ω–æ–≤–ª—é—î —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–ª–∏—à–∫–∞—Ö"""
        _logger.info(f"üîÑ Updating balance serial numbers for disposal {self.disposal_id.number}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞–ª–∏—à–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        balances = self.env['stock.balance'].search([
            ('nomenclature_id', '=', self.selected_line_id.nomenclature_id.id),
            ('location_type', '=', 'warehouse'),
            ('warehouse_id', '=', self.disposal_id.warehouse_id.id),
        ])
        
        _logger.info(f"üìä Found {len(balances)} balance records")
        
        for balance in balances:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤
            movement = self.env['stock.balance.movement'].search([
                ('nomenclature_id', '=', self.selected_line_id.nomenclature_id.id),
                ('document_reference', '=', self.disposal_id.number),
                ('operation_type', '=', 'disposal'),
            ], limit=1)
            
            if movement:
                _logger.info(f"üéØ Updating balance ID: {balance.id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ –∑–∞–ª–∏—à–∫–∞—Ö
                balance.write({
                    'serial_numbers': serial_numbers_text,
                    'last_update': fields.Datetime.now(),
                })
                
                # –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –≤ —Ä—É—Å—ñ –∑–∞–ª–∏—à–∫—ñ–≤
                movement.write({
                    'serial_numbers': serial_numbers_text,
                })
                
                _logger.info(f"‚úÖ Balance updated successfully!")
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                self.disposal_id.message_post(
                    body=_('üî¢ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –¥–ª—è %s: %s') % (
                        self.selected_line_id.nomenclature_id.name,
                        serial_numbers_text.replace('\n', ', ')
                    ),
                    message_type='notification'
                )
                
                return True
        
        _logger.warning(f"‚ö†Ô∏è No balance found to update for {self.selected_line_id.nomenclature_id.name}")
        return False

    def _validate_serial_numbers(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —è–∫ –≤ receipt wizard
        return True

    def action_load_from_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É (–∑–∞–≥–ª—É—à–∫–∞)"""
        raise UserError(_('–§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'))

class StockDisposalSerialWizardLine(models.TransientModel):
    _name = 'stock.disposal.serial.wizard.serial'  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û –Ω–∞–∑–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ XML
    _description = '–õ—ñ–Ω—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —Å–µ—Ä—ñ–π–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏'
 
    wizard_id = fields.Many2one('stock.disposal.serial.wizard', 'Wizard', required=True, ondelete='cascade')
    serial_number = fields.Char('–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', required=True)