"""
–ó–∞–≥–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è custom_stock_receipt
"""
import logging

_logger = logging.getLogger(__name__)


def get_amount_in_words(amount):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å—É–º—É –≤ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"""
    
    def get_currency_form(num):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–≥—Ä–∏–≤–Ω—è'"""
        if num % 100 in [11, 12, 13, 14]:
            return "–≥—Ä–∏–≤–µ–Ω—å"
        elif num % 10 == 1:
            return "–≥—Ä–∏–≤–Ω—è" 
        elif num % 10 in [2, 3, 4]:
            return "–≥—Ä–∏–≤–Ω—ñ"
        else:
            return "–≥—Ä–∏–≤–µ–Ω—å"
    
    def get_kopeck_form(num):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–∫–æ–ø—ñ–π–∫–∞'"""
        if num % 100 in [11, 12, 13, 14]:
            return "–∫–æ–ø—ñ–π–æ–∫"
        elif num % 10 == 1:
            return "–∫–æ–ø—ñ–π–∫–∞"
        elif num % 10 in [2, 3, 4]:
            return "–∫–æ–ø—ñ–π–∫–∏" 
        else:
            return "–∫–æ–ø—ñ–π–æ–∫"
    
    def convert_hundreds(num, feminine=False):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —á–∏—Å–ª–æ –¥–æ 999 –≤ —Å–ª–æ–≤–∞"""
        ones = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', "–ø'—è—Ç—å", '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', "–¥–µ–≤'—è—Ç—å"]
        ones_f = ['', '–æ–¥–Ω–∞', '–¥–≤—ñ', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', "–ø'—è—Ç—å", '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', "–¥–µ–≤'—è—Ç—å"]
        teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–∞–¥—Ü—è—Ç—å', '–¥–≤–∞–Ω–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç—å', '—á–æ—Ç–∏—Ä–Ω–∞–¥—Ü—è—Ç—å', 
                "–ø'—è—Ç–Ω–∞–¥—Ü—è—Ç—å", '—à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç—å', '—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', '–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', "–¥–µ–≤'—è—Ç–Ω–∞–¥—Ü—è—Ç—å"]
        tens = ['', '', '–¥–≤–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–¥—Ü—è—Ç—å', '—Å–æ—Ä–æ–∫', "–ø'—è—Ç–¥–µ—Å—è—Ç", '—à—ñ—Å—Ç–¥–µ—Å—è—Ç', '—Å—ñ–º–¥–µ—Å—è—Ç', '–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç', "–¥–µ–≤'—è–Ω–æ—Å—Ç–æ"]
        hundreds = ['', '—Å—Ç–æ', '–¥–≤—ñ—Å—Ç—ñ', '—Ç—Ä–∏—Å—Ç–∞', '—á–æ—Ç–∏—Ä–∏—Å—Ç–∞', "–ø'—è—Ç—Å–æ—Ç", '—à—ñ—Å—Ç—Å–æ—Ç', '—Å—ñ–º—Å–æ—Ç', '–≤—ñ—Å—ñ–º—Å–æ—Ç', "–¥–µ–≤'—è—Ç—Å–æ—Ç"]
        
        if num == 0:
            return ""
        
        result = []
        
        # –°–æ—Ç–Ω—ñ
        if num >= 100:
            result.append(hundreds[num // 100])
            num %= 100
        
        # –î–µ—Å—è—Ç–∫–∏ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ
        if num >= 20:
            result.append(tens[num // 10])
            if num % 10 > 0:
                if feminine:
                    result.append(ones_f[num % 10])
                else:
                    result.append(ones[num % 10])
        elif num >= 10:
            result.append(teens[num - 10])
        elif num > 0:
            if feminine:
                result.append(ones_f[num])
            else:
                result.append(ones[num])
        
        return " ".join(result)
    
    def get_scale_word(num, words):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ–æ—Ä–º—É –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        if num % 100 in [11, 12, 13, 14]:
            return words[2]  # –±–∞–≥–∞—Ç–æ
        elif num % 10 == 1:
            return words[0]  # –æ–¥–∏–Ω
        elif num % 10 in [2, 3, 4]:
            return words[1]  # –∫—ñ–ª—å–∫–∞
        else:
            return words[2]  # –±–∞–≥–∞—Ç–æ
    
    def number_to_words_ua(num):
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —á–∏—Å–ª–æ –≤ —Å–ª–æ–≤–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        if num == 0:
            return "–Ω—É–ª—å"
        
        result = []
        
        # –ú—ñ–ª—å—è—Ä–¥–∏
        if num >= 1000000000:
            billions = num // 1000000000
            result.append(convert_hundreds(billions))
            result.append(get_scale_word(billions, ['–º—ñ–ª—å—è—Ä–¥', '–º—ñ–ª—å—è—Ä–¥–∏', '–º—ñ–ª—å—è—Ä–¥—ñ–≤']))
            num %= 1000000000
        
        # –ú—ñ–ª—å–π–æ–Ω–∏
        if num >= 1000000:
            millions = num // 1000000
            result.append(convert_hundreds(millions))
            result.append(get_scale_word(millions, ['–º—ñ–ª—å–π–æ–Ω', '–º—ñ–ª—å–π–æ–Ω–∏', '–º—ñ–ª—å–π–æ–Ω—ñ–≤']))
            num %= 1000000
        
        # –¢–∏—Å—è—á—ñ
        if num >= 1000:
            thousands = num // 1000
            result.append(convert_hundreds(thousands, True))  # –∂—ñ–Ω–æ—á–∏–π —Ä—ñ–¥ –¥–ª—è —Ç–∏—Å—è—á
            result.append(get_scale_word(thousands, ['—Ç–∏—Å—è—á–∞', '—Ç–∏—Å—è—á—ñ', '—Ç–∏—Å—è—á']))
            num %= 1000
        
        # –°–æ—Ç–Ω—ñ, –¥–µ—Å—è—Ç–∫–∏, –æ–¥–∏–Ω–∏—Ü—ñ (–¥–ª—è –≥—Ä–∏–≤–µ–Ω—å - –∂—ñ–Ω–æ—á–∏–π —Ä—ñ–¥)
        if num > 0:
            result.append(convert_hundreds(num, True))
        
        return " ".join(filter(None, result))
    
    try:
        int_part = int(amount)
        decimal_part = int(round((amount - int_part) * 100))
        
        if int_part == 0:
            words_part = "–Ω—É–ª—å"
        else:
            words_part = number_to_words_ua(int_part)
        
        currency_form = get_currency_form(int_part)
        
        if decimal_part == 0:
            return f"{words_part} {currency_form}"
        else:
            kopeck_words = number_to_words_ua(decimal_part) if decimal_part > 0 else "–Ω—É–ª—å"
            kopeck_form = get_kopeck_form(decimal_part)
            return f"{words_part} {currency_form} {kopeck_words} {kopeck_form}"
            
    except Exception as e:
        # Fallback –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
        _logger.error(f"Error in get_amount_in_words: {e}")
        int_part = int(amount)
        decimal_part = int((amount - int_part) * 100)
        return f"{int_part} –≥—Ä–∏–≤–µ–Ω—å {decimal_part:02d} –∫–æ–ø—ñ–π–æ–∫"


def get_company_prefix(company):
    """–û—Ç—Ä–∏–º—É—î –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    if company and company.name:
        words = company.name.split()
        return words[1].upper()[:3] if len(words) >= 2 else words[0].upper()[:3] if words else 'XXX'
    return 'XXX'


def parse_serial_numbers(serial_numbers_text):
    """–†–æ–∑–±–∏—Ä–∞—î —Ç–µ–∫—Å—Ç –∑ —Å–µ—Ä—ñ–π–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫"""
    if not serial_numbers_text:
        return []
    
    serials = []
    for line_text in serial_numbers_text.split('\n'):
        for serial in line_text.split(','):
            serial = serial.strip()
            if serial:
                serials.append(serial)
    return serials


def format_serial_numbers(serials_list):
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –≤ —Ç–µ–∫—Å—Ç"""
    if not serials_list:
        return ""
    return '\n'.join(serials_list)


def validate_serial_numbers(env, serials_list, current_nomenclature_id, exclude_balance_ids=None):
    """–í–∞–ª—ñ–¥—É—î —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º—ñ"""
    if not serials_list:
        return True, []
    
    exclude_balance_ids = exclude_balance_ids or []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ –º–µ–∂–∞—Ö —Å–ø–∏—Å–∫—É
    unique_serials = list(set(serials_list))
    if len(serials_list) != len(unique_serials):
        duplicates = [serial for serial in serials_list if serials_list.count(serial) > 1]
        return False, [f'–ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {", ".join(set(duplicates))}']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –≤ —Å–∏—Å—Ç–µ–º—ñ
    if env.get('stock.balance'):
        existing_serials = env['stock.balance'].search([
            ('serial_numbers', 'ilike', serials_list[0]),
            ('id', 'not in', exclude_balance_ids)
        ])
        
        conflicts = []
        for balance in existing_serials:
            if balance.serial_numbers:
                balance_serials = parse_serial_numbers(balance.serial_numbers)
                for serial in serials_list:
                    if serial in balance_serials and balance.nomenclature_id.id != current_nomenclature_id:
                        conflicts.append(f"{serial} (–≤–∂–µ –≤ {balance.nomenclature_id.name})")
        
        if conflicts:
            return False, [f'–°–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è:\n{chr(10).join(conflicts)}']
    
    return True, []


def get_document_context_key(model_name):
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–ø–∞–Ω—ñ–π"""
    return f'_get_child_companies_domain,{model_name}'


def log_operation(operation_type, document_number, details=""):
    """–õ–æ–≥—É—î –æ–ø–µ—Ä–∞—Ü—ñ—é"""
    _logger.info(f"üìã {operation_type}: {document_number} - {details}")


def format_posting_time_options(doc_date, today):
    """–§–æ—Ä–º–∞—Ç—É—î –æ–ø—Ü—ñ—ó –¥–ª—è —á–∞—Å—É –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if doc_date == today:
        return [
            ('start_of_day', '–ü–æ—á–∞—Ç–æ–∫ –¥–Ω—è'),
            ('end_of_day', '–ö—ñ–Ω–µ—Ü—å –¥–Ω—è'),
            ('current_time', '–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å'),
            ('custom_time', '–í–ª–∞—Å–Ω–∏–π —á–∞—Å')
        ]
    else:
        return [
            ('start_of_day', '–ü–æ—á–∞—Ç–æ–∫ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è'),
            ('end_of_day', '–ö—ñ–Ω–µ—Ü—å –≤–∏–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è')
        ]