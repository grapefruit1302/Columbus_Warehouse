from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
from .utils import parse_serial_numbers, format_serial_numbers, validate_serial_numbers
import logging

_logger = logging.getLogger(__name__)


class StockReceiptSerialWizardBase(models.AbstractModel):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è wizard —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
    _name = 'stock.receipt.serial.wizard.base'
    _description = '–ë–∞–∑–æ–≤–∏–π wizard –¥–ª—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤'

    warning_message = fields.Text('–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è', readonly=True)
    selected_product_name = fields.Char('–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É', readonly=True)
    selected_qty = fields.Float('–ö—ñ–ª—å–∫—ñ—Å—Ç—å', readonly=True)
    current_serial_count = fields.Integer('–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å S/N', compute='_compute_current_serial_count')
    serial_line_ids = fields.One2many('stock.receipt.serial.wizard.line.base', 'wizard_id', '–°–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏')

    @api.depends('serial_line_ids')
    def _compute_current_serial_count(self):
        for wizard in self:
            wizard.current_serial_count = len([line for line in wizard.serial_line_ids if line.serial_number])
    
    @api.constrains('serial_line_ids', 'selected_qty')
    def _check_serial_count_limit(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ"""
        for wizard in self:
            if wizard.selected_qty and wizard.current_serial_count > wizard.selected_qty:
                raise ValidationError(
                    _('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ (%d) –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ (%d)') % 
                    (wizard.current_serial_count, int(wizard.selected_qty))
                )

    # –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏
    def _get_document_field_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        raise NotImplementedError()

    def _get_line_field_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –ø–æ–ª—è –ø–æ–∑–∏—Ü—ñ—ó"""
        raise NotImplementedError()

    def _get_document_model(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–¥–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        raise NotImplementedError()

    def _get_line_model(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–¥–µ–ª—å –ø–æ–∑–∏—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        raise NotImplementedError()

    def _get_serial_line_model(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–¥–µ–ª—å –¥–ª—è —Ä—è–¥–∫—ñ–≤ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        raise NotImplementedError()

    def _get_balance_operation_type(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –±–∞–ª–∞–Ω—Å—É"""
        raise NotImplementedError()

    @api.model
    def default_get(self, fields_list):
        res = super().default_get(fields_list)
        line_field = self._get_line_field_name()
        line_id = self.env.context.get(f'default_{line_field}')
        
        if line_id:
            line_model = self._get_line_model()
            line = self.env[line_model].browse(line_id)
            document_field = self._get_document_field_name()
            
            res[document_field] = getattr(line, document_field).id
            res[line_field] = line_id
            res['selected_product_name'] = line.nomenclature_id.name
            res['selected_qty'] = line.qty
            
            if line.serial_numbers:
                existing_serials = parse_serial_numbers(line.serial_numbers)
                res['serial_line_ids'] = [(0, 0, {'serial_number': serial}) for serial in existing_serials]
        
        return res

    def action_save_and_close(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –∑–∞–ª–∏—à–∫–∏"""
        self.ensure_one()
        validation_result = self._validate_serial_numbers()
        
        if isinstance(validation_result, dict) and validation_result.get('type') == 'ir.actions.act_window':
            return validation_result
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ —Ä—è–¥–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        serials = [line.serial_number for line in self.serial_line_ids if line.serial_number]
        serial_numbers_text = format_serial_numbers(serials)
        
        line_field = self._get_line_field_name()
        selected_line = getattr(self, line_field)
        
        _logger.info(f"üîß Saving serial numbers to line: '{serial_numbers_text}'")
        selected_line.serial_numbers = serial_numbers_text
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –≤ –∑–∞–ª–∏—à–∫–∞—Ö
        self._update_balance_serial_numbers(serial_numbers_text)
        
        return {'type': 'ir.actions.act_window_close'}

    def _update_balance_serial_numbers(self, serial_numbers_text):
        """–û–Ω–æ–≤–ª—é—î —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∑–∞–ª–∏—à–∫–∞—Ö"""
        line_field = self._get_line_field_name()
        document_field = self._get_document_field_name()
        selected_line = getattr(self, line_field)
        document = getattr(self, document_field)
        
        _logger.info(f"üîÑ Updating balance serial numbers for document {document.number}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞–ª–∏—à–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        balances = self.env['stock.balance'].search([
            ('nomenclature_id', '=', selected_line.nomenclature_id.id),
            ('location_type', '=', 'warehouse'),
            ('warehouse_id', '=', document.warehouse_id.id),
        ])
        
        _logger.info(f"üìä Found {len(balances)} balance records")
        
        operation_type = self._get_balance_operation_type()
        
        for balance in balances:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤
            movement = self.env['stock.balance.movement'].search([
                ('nomenclature_id', '=', selected_line.nomenclature_id.id),
                ('document_reference', '=', document.number),
                ('operation_type', '=', operation_type),
            ], limit=1)
            
            if movement:
                _logger.info(f"üéØ Updating balance ID: {balance.id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ –∑–∞–ª–∏—à–∫–∞—Ö
                balance.write({
                    'serial_numbers': serial_numbers_text,
                    'last_update': fields.Datetime.now(),
                })
                
                # –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –≤ —Ä—É—Å—ñ –∑–∞–ª–∏—à–∫—ñ–≤
                movement.write({
                    'serial_numbers': serial_numbers_text,
                })
                
                _logger.info(f"‚úÖ Balance updated successfully!")
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document.message_post(
                    body=_('üî¢ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –¥–ª—è %s: %s') % (
                        selected_line.nomenclature_id.name,
                        serial_numbers_text.replace('\n', ', ')
                    ),
                    message_type='notification'
                )
                
                return True
        
        _logger.warning(f"‚ö†Ô∏è No balance found to update for {selected_line.nomenclature_id.name}")
        return False

    def _validate_serial_numbers(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        line_field = self._get_line_field_name()
        selected_line = getattr(self, line_field)
        
        serials = [line.serial_number for line in self.serial_line_ids if line.serial_number]
        
        if not serials:
            return True
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –∑ utils
        is_valid, errors = validate_serial_numbers(
            self.env, 
            serials, 
            selected_line.nomenclature_id.id
        )
        
        if not is_valid:
            raise ValidationError('\n'.join(errors))
        
        return True

    def remove_duplicates(self):
        """–í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        serials = []
        unique_serials = []
        
        for line in self.serial_line_ids:
            if line.serial_number:
                if line.serial_number not in serials:
                    serials.append(line.serial_number)
                    unique_serials.append(line.serial_number)
        
        # –û—á–∏—â–∞—î–º–æ —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        self.serial_line_ids = [(5, 0, 0)]  # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏
        serial_lines = [(0, 0, {'serial_number': serial}) for serial in unique_serials]
        self.serial_line_ids = serial_lines
        
        duplicates_removed = len(serials) - len(unique_serials)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if duplicates_removed > 0:
            message = _('–í–∏–¥–∞–ª–µ–Ω–æ %d –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤') % duplicates_removed
        else:
            message = _('–î—É–±–ª—ñ–∫–∞—Ç–∏ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤'),
                'message': message,
                'type': 'success' if duplicates_removed > 0 else 'info',
                'sticky': False,
            }
        }

    def action_load_from_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∑ —Ñ–∞–π–ª—É"""
        raise UserError(_('–§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'))

    def action_generate_serials(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        raise UserError(_('–§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'))

    def action_clear_all(self):
        """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
        self.serial_line_ids = [(5, 0, 0)]
        return True

    def action_add_serial_line(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
        if self.selected_qty and self.current_serial_count >= self.selected_qty:
            raise UserError(
                _('–ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤. –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º: %d') % 
                int(self.selected_qty)
            )
        self.serial_line_ids = [(0, 0, {'serial_number': ''})]
        return True


class StockReceiptSerialWizardLineBase(models.AbstractModel):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ä—è–¥–∫—ñ–≤ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤"""
    _name = 'stock.receipt.serial.wizard.line.base'
    _description = '–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ä—è–¥–∫—ñ–≤ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤'

    wizard_id = fields.Many2one('stock.receipt.serial.wizard.base', 'Wizard', required=True, ondelete='cascade')
    serial_number = fields.Char('–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', required=True)
    is_duplicate = fields.Boolean('–î—É–±–ª—ñ–∫–∞—Ç', compute='_compute_is_duplicate')
    is_existing = fields.Boolean('–Ü—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ', compute='_compute_is_existing')

    @api.depends('serial_number', 'wizard_id.serial_line_ids.serial_number')
    def _compute_is_duplicate(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –¥—É–±–ª—ñ–∫–∞—Ç–æ–º –≤ –º–µ–∂–∞—Ö wizard"""
        for line in self:
            if line.serial_number:
                other_lines = line.wizard_id.serial_line_ids.filtered(lambda l: l.id != line.id)
                line.is_duplicate = line.serial_number in other_lines.mapped('serial_number')
            else:
                line.is_duplicate = False

    @api.depends('serial_number')
    def _compute_is_existing(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –≤ —Å–∏—Å—Ç–µ–º—ñ"""
        for line in self:
            if line.serial_number:
                existing = self.env['stock.balance'].search([
                    ('serial_numbers', 'ilike', line.serial_number)
                ], limit=1)
                line.is_existing = bool(existing)
            else:
                line.is_existing = False