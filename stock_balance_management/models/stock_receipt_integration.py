# stock_balance_management/models/stock_receipt_integration.py
# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –£–Ω–∏–∫–∞—î–º–æ –ø–æ–¥–≤–æ—î–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –±–µ–∑ –∑–º—ñ–Ω–∏ batch –º–æ–¥—É–ª—è

from odoo import models, fields, api, _
from odoo.exceptions import UserError
import logging

_logger = logging.getLogger(__name__)


class StockReceiptIncoming(models.Model):
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø—Ä–∏—Ö—ñ–¥–Ω–∏–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–∏–º–∏"""
    _inherit = 'stock.receipt.incoming'

    def _do_posting(self, posting_time, custom_datetime=None):
        """–†–æ–∑—à–∏—Ä—é—î–º–æ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤"""
        _logger.info(f"üîÑ [BALANCE] Starting posting for receipt {self.number}")
        
        # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ super() —â–æ–± –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–ª–∏ —ñ–Ω—à—ñ –º–æ–¥—É–ª—ñ (–≤–∫–ª—é—á–∞—é—á–∏ batch)
        result = super()._do_posting(posting_time, custom_datetime)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ª–∏—à–∫–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        existing_movements = self.env['stock.balance.movement'].search([
            ('document_reference', '=', self.number),
            ('operation_type', '=', 'receipt')
        ])
        
        if existing_movements:
            _logger.info(f"‚ö†Ô∏è [BALANCE] Movements already exist for {self.number}, skipping creation")
            return result
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ª–∏—à–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
        _logger.info(f"üì¶ [BALANCE] Creating balance movements for receipt {self.number}")
        for line in self.line_ids:
            try:
                self._create_balance_movement_for_line(line)
                _logger.info(f"‚úÖ [BALANCE] Balance movement created for {line.nomenclature_id.name}")
            except Exception as e:
                _logger.error(f"‚ùå [BALANCE] Failed to create balance movement for {line.nomenclature_id.name}: {e}")
        
        return result

    def _create_balance_movement_for_line(self, line):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞–∫–ª–∞–¥–Ω–æ—ó"""
        if line.qty <= 0:
            _logger.warning(f"‚ö†Ô∏è Skipping line with qty <= 0: {line.nomenclature_id.name}")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞—Ü—ñ—é (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–∫–∞—Ü—ñ—é —Å–∫–ª–∞–¥—É)
        location = line.location_id or self.warehouse_id.lot_stock_id
        
        # –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
        _logger.info(f"üîç DETAILED SERIAL ANALYSIS for {line.nomenclature_id.name}:")
        _logger.info(f"   üìã line.serial_numbers: '{getattr(line, 'serial_numbers', 'FIELD_NOT_FOUND')}'")
        _logger.info(f"   üè∑Ô∏è tracking_serial: {line.nomenclature_id.tracking_serial}")
        _logger.info(f"   üìù serial_numbers type: {type(getattr(line, 'serial_numbers', None))}")
        _logger.info(f"   üìè serial_numbers length: {len(getattr(line, 'serial_numbers', '')) if getattr(line, 'serial_numbers', None) else 0}")
        
        # –®—É–∫–∞—î–º–æ –ø–∞—Ä—Ç—ñ—é (–º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ batch –º–æ–¥—É–ª–µ–º)
        batch = self.env['stock.batch'].search([
            ('source_document_type', '=', 'receipt'),
            ('source_document_number', '=', self.number),
            ('nomenclature_id', '=', line.nomenclature_id.id)
        ], limit=1)
        
        _logger.info(f"üì¶ Found batch for {line.nomenclature_id.name}: {batch.batch_number if batch else 'None'}")
        
        try:
            # –ü–û–ö–†–ê–©–ï–ù–ê –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
            serial_numbers_to_pass = None
            
            if hasattr(line, 'serial_numbers') and line.serial_numbers:
                # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ä—è–¥–∫—ñ–≤
                cleaned_serials = line.serial_numbers.strip()
                if cleaned_serials:
                    if line.nomenclature_id.tracking_serial:
                        serial_numbers_to_pass = cleaned_serials
                        _logger.info(f"‚úÖ PASSING cleaned serial numbers: '{serial_numbers_to_pass}'")
                        
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                        serials_list = []
                        for line_serial in cleaned_serials.split('\n'):
                            for serial in line_serial.split(','):
                                serial = serial.strip()
                                if serial:
                                    serials_list.append(serial)
                        _logger.info(f"üìä Parsed serials list ({len(serials_list)} items): {serials_list}")
                    else:
                        _logger.warning(f"‚ö†Ô∏è Serial numbers exist but tracking_serial is FALSE for {line.nomenclature_id.name}")
                        _logger.warning(f"   üìù Please enable '–û–±–ª—ñ–∫ –ø–æ S/N' for this product!")
                else:
                    _logger.info(f"‚ÑπÔ∏è Serial numbers field exists but is empty after cleaning")
            else:
                _logger.info(f"‚ÑπÔ∏è No serial numbers for {line.nomenclature_id.name}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤
            _logger.info(f"üîß Creating movement with serial_numbers: '{serial_numbers_to_pass}'")
            movement = self.env['stock.balance.movement'].create_movement(
                nomenclature_id=line.nomenclature_id.id,
                qty=line.qty,
                movement_type='in',
                operation_type='receipt',
                location_to_type='warehouse',
                warehouse_to_id=self.warehouse_id.id,
                location_to_id=location.id,
                batch_id=batch.id if batch else None,
                uom_id=line.selected_uom_id.id or line.product_uom_id.id,
                document_reference=self.number,
                notes=f'–ü—Ä–∏—Ö—ñ–¥–Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞ {self.number}',
                serial_numbers=serial_numbers_to_pass,
                company_id=self.company_id.id,
                date=self.posting_datetime,
            )
            
            _logger.info(f"‚úÖ Created movement ID: {movement.id}")
            _logger.info(f"üìù Movement serial_numbers: '{movement.serial_numbers}'")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä—ñ–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ –∑–∞–ª–∏—à–∫–∏
            balance = self.env['stock.balance'].search([
                ('nomenclature_id', '=', line.nomenclature_id.id),
                ('location_type', '=', 'warehouse'),
                ('warehouse_id', '=', self.warehouse_id.id),
                ('batch_id', '=', batch.id if batch else False),
            ], limit=1)
            
            if balance:
                _logger.info(f"üéØ Found balance ID: {balance.id}")
                _logger.info(f"üìã Balance serial_numbers: '{balance.serial_numbers}'")
                if balance.serial_numbers:
                    _logger.info(f"‚úÖ SUCCESS: Serial numbers are in balance!")
                else:
                    _logger.warning(f"‚ö†Ô∏è WARNING: Serial numbers NOT in balance!")
            else:
                _logger.warning(f"‚ùå No balance record found!")
            
            self.message_post(
                body=_('–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è %s: +%s %s') % (
                    line.nomenclature_id.name, 
                    line.qty, 
                    (line.selected_uom_id or line.product_uom_id).name
                ),
                message_type='notification'
            )
            
        except Exception as e:
            _logger.error(f"‚ùå ERROR creating balance movement for {line.nomenclature_id.name}: {e}")
            import traceback
            _logger.error(f"üî¥ Traceback: {traceback.format_exc()}")
            self.message_post(
                body=_('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è %s: %s') % (line.nomenclature_id.name, str(e)),
                message_type='notification'
            )
            raise


class StockReceiptDisposal(models.Model):
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –∞–∫—Ç–∞–º–∏ –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è"""
    _inherit = 'stock.receipt.disposal'

    def _do_posting(self, posting_time, custom_datetime=None):
        """–†–æ–∑—à–∏—Ä—é—î–º–æ –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤"""
        _logger.info(f"üîÑ [BALANCE] Starting posting for disposal {self.number}")
        
        # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ super() —â–æ–± –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–ª–∏ —ñ–Ω—à—ñ –º–æ–¥—É–ª—ñ (–≤–∫–ª—é—á–∞—é—á–∏ batch)
        result = super()._do_posting(posting_time, custom_datetime)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ª–∏—à–∫–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        existing_movements = self.env['stock.balance.movement'].search([
            ('document_reference', '=', self.number),
            ('operation_type', '=', 'disposal')
        ])
        
        if existing_movements:
            _logger.info(f"‚ö†Ô∏è [BALANCE] Movements already exist for {self.number}, skipping creation")
            return result
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ª–∏—à–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î
        _logger.info(f"üì¶ [BALANCE] Creating balance movements for disposal {self.number}")
        for line in self.line_ids:
            try:
                self._create_balance_movement_for_line(line)
                _logger.info(f"‚úÖ [BALANCE] Balance movement created for {line.nomenclature_id.name}")
            except Exception as e:
                _logger.error(f"‚ùå [BALANCE] Failed to create balance movement for {line.nomenclature_id.name}: {e}")
        
        return result

    def _create_balance_movement_for_line(self, line):
        """–°—Ç–≤–æ—Ä—é—î —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó –∞–∫—Ç–∞"""
        if line.qty <= 0:
            _logger.warning(f"‚ö†Ô∏è Skipping line with qty <= 0: {line.nomenclature_id.name}")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞—Ü—ñ—é (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–∫–∞—Ü—ñ—é —Å–∫–ª–∞–¥—É)
        location = line.location_id or self.warehouse_id.lot_stock_id
        
        # –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
        _logger.info(f"üîç DETAILED SERIAL ANALYSIS for {line.nomenclature_id.name}:")
        _logger.info(f"   üìã line.serial_numbers: '{getattr(line, 'serial_numbers', 'FIELD_NOT_FOUND')}'")
        _logger.info(f"   üè∑Ô∏è tracking_serial: {line.nomenclature_id.tracking_serial}")
        
        # –®—É–∫–∞—î–º–æ –ø–∞—Ä—Ç—ñ—é (–º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ batch –º–æ–¥—É–ª–µ–º)
        batch = self.env['stock.batch'].search([
            ('source_document_type', '=', 'inventory'),
            ('source_document_number', '=', self.number),
            ('nomenclature_id', '=', line.nomenclature_id.id)
        ], limit=1)
        
        _logger.info(f"üì¶ Found batch for {line.nomenclature_id.name}: {batch.batch_number if batch else 'None'}")
        
        try:
            # –ü–û–ö–†–ê–©–ï–ù–ê –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
            serial_numbers_to_pass = None
            
            if line.serial_numbers:
                cleaned_serials = line.serial_numbers.strip()
                if cleaned_serials:
                    if line.nomenclature_id.tracking_serial:
                        serial_numbers_to_pass = cleaned_serials
                        _logger.info(f"‚úÖ PASSING cleaned serial numbers: '{serial_numbers_to_pass}'")
                    else:
                        _logger.warning(f"‚ö†Ô∏è Serial numbers exist but tracking_serial is FALSE")
                else:
                    _logger.info(f"‚ÑπÔ∏è Serial numbers field exists but is empty after cleaning")
            else:
                _logger.info(f"‚ÑπÔ∏è No serial numbers for {line.nomenclature_id.name}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤
            movement = self.env['stock.balance.movement'].create_movement(
                nomenclature_id=line.nomenclature_id.id,
                qty=line.qty,
                movement_type='in',
                operation_type='disposal',
                location_to_type='warehouse',
                warehouse_to_id=self.warehouse_id.id,
                location_to_id=location.id,
                batch_id=batch.id if batch else None,
                uom_id=line.selected_uom_id.id or line.product_uom_id.id,
                document_reference=self.number,
                notes=f'–ê–∫—Ç –æ–ø—Ä–∏—Ö–æ–¥—É–≤–∞–Ω–Ω—è {self.number}',
                serial_numbers=serial_numbers_to_pass,
                company_id=self.company_id.id,
                date=self.posting_datetime,
            )
            
            _logger.info(f"‚úÖ Created movement ID: {movement.id} with serial_numbers: '{movement.serial_numbers}'")
            
            self.message_post(
                body=_('–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä—É—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è %s: +%s %s') % (
                    line.nomenclature_id.name, 
                    line.qty, 
                    (line.selected_uom_id or line.product_uom_id).name
                ),
                message_type='notification'
            )
            
        except Exception as e:
            _logger.error(f"‚ùå ERROR creating balance movement: {e}")
            import traceback
            _logger.error(f"üî¥ Traceback: {traceback.format_exc()}")
            self.message_post(
                body=_('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –¥–ª—è %s: %s') % (line.nomenclature_id.name, str(e)),
                message_type='notification'
            )
            raise